const { v4: uuid } = require('uuid')
const { Customer, Person, GENDER } = require('../../customer')

const { AgeVerification, IdentificationNumberVerification } = require('./verification')
const { SimpleVerification } = require('./SimpleVerification')
const { CustomerVerificationResult, CustomerVerificationResultStatus } = require('./CustomerVerificationResult')
const { CustomerVerifier } = require('./CustomerVerifier')
const { BIKVerificationService } = require('./BIKVerificationService')
const { VeryBadVerificationServiceWrapper } = require('./VeryBadVerificationServiceWrapper')

/**
 * Zawiera przyk켹ady inicjalizacji w polach testowych, przyk켹ad false-positive,
 * przyk켹ad zastosowania Test Doubles.
 */
describe('CustomerVerifier', () => {
  
  const buildCustomer = () => {
    return new Customer({
      uuid: uuid(),
      person: new Person({
        name: "John",
        surname: "Smith",
        dateOfBirth: new Date(1996, 7 /* couting from 0 */, 28, 12, 0, 0),
        gender: GENDER.MALE,
        nationalIdentificationNumber: "96082812079"
      })
    })
  }

	// Implementacja testowa (Test Double) w celu unikni캧cia kontaktowania si캧 z
	// zewn캧trznym serwisem w testach jednostkowych.
	class TestVerificationService extends BIKVerificationService {

		constructor() {
			super("http://example.com");
		}

		verify(/** @type {Customer} */ customer) {
			return CustomerVerificationResult.passed(customer.uuid);
		}
	}

	// Implementacja testowa (Test Double) w celu unikni캧cia kontaktowania si캧 z
	// zewn캧trznym serwisem w testach jednostkowych.
	class TestBadServiceWrapper extends VeryBadVerificationServiceWrapper {
		verify() {
			// do not run all these database and network operations in a unit test
			return true;
		}
  }

  const buildVerifications = () => {
		const verifications = new Set()
		verifications.add(new AgeVerification())
		verifications.add(new IdentificationNumberVerification())
		return verifications
  }

	// W zale콮no콑ci od potrzeb, inicjalizacja w polach mo콮e by캖 stanowa
  // dla test (콑wie콮y stan dla wywo켹ania ka콮dej metody) lub per ca켹y suite test칩w.
  // poni콮ej - 콑wie콮y serwis per test
  // gdyby nie by켹o potrzebne tworzenie 콑wie콮ej instancji, zosta켹by const service... za콑 `beforeEach` usuni캧ty

  /** @type {CustomerVerifier} */
  let service
  beforeEach(() => {
    service = new CustomerVerifier(
      new TestVerificationService(),
      buildVerifications(),
      new TestBadServiceWrapper()
    )
  })
    
	it('should verify correct person', () => {
		// Given
		const customer = buildCustomer()

    // When
		const result = service.verify(customer)

		// Then
		expect(result.status).toEqual(CustomerVerificationResultStatus.VERIFICATION_PASSED)
		expect(result.userId).toEqual(customer.uuid)
  });

  const buildSimpleVerification = () => {
		const verifications = new Set()
		verifications.add(new SimpleVerification())
		return verifications
  }

	// Przyk켹ad z켹ego testu: test, kt칩ry przechodzi nawet bez implementacji
	it('should fail simple verification', () => {
		// Given
		const customer = buildCustomer()
		const service = new CustomerVerifier(
      new TestVerificationService(),
      buildSimpleVerification(),
      new TestBadServiceWrapper()
    )

		// When
		const result = service.verify(customer)

    // `toBe` vs `toEqual` poni콮ej
    // `toBe` sprawdza "to콮samo콑캖", czyli w przypadku obiekt칩w - referencj캧
    // `toEqual` sprawdza warto콑캖 (potencjalnie rekursywnie, je콑li trzeba)
    // w przypadku prymityw칩w - jeden pies 游뗶
		expect(result.status).toBe(CustomerVerificationResultStatus.VERIFICATION_FAILED)
		expect(result.status).toEqual(CustomerVerificationResultStatus.VERIFICATION_FAILED)
	})
})
